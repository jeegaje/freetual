{"remainingRequest":"/home/jeegaje/freetual/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/jeegaje/freetual/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jeegaje/freetual/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jeegaje/freetual/src/views/Travel Agent.vue?vue&type=template&id=043f57ce&","dependencies":[{"path":"/home/jeegaje/freetual/src/views/Travel Agent.vue","mtime":1636048800849},{"path":"/home/jeegaje/freetual/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jeegaje/freetual/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/jeegaje/freetual/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jeegaje/freetual/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}